"""
This module provides utilities for formatting and displaying vulnerabilities.
"""

import logging
from typing import List, Dict, Any

from core.scanners.sast_scanner import Vulnerability

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


def _remove_emoji(text: str) -> str:
    """
    Remove emoji characters from text.

    Args:
        text (str): The text to clean.

    Returns:
        str: The cleaned text.
    """
    if not text:
        return ""

    # Convert to string if not already
    if not isinstance(text, str):
        text = str(text)

    # Use a more comprehensive approach to remove all non-ASCII characters
    result = ""
    for char in text:
        # Keep only ASCII characters (codes 0-127)
        if ord(char) < 128:
            result += char
        else:
            # For emoji and other non-ASCII characters, use a descriptive replacement
            if char == '🔥': result += '[FIRE]'
            elif char == '⚠️': result += '[WARNING]'
            elif char == '❌': result += '[X]'
            elif char == '✅': result += '[CHECK]'
            elif char == '🚨': result += '[ALERT]'
            elif char == '💡': result += '[IDEA]'
            elif char == '🔒': result += '[LOCK]'
            elif char == '🔓': result += '[UNLOCK]'
            elif char == '🔍': result += '[SEARCH]'
            elif char == '📝': result += '[NOTE]'
            elif char == '⚙️': result += '[SETTINGS]'
            elif char == '📊': result += '[CHART]'
            elif char == '📈': result += '[GRAPH_UP]'
            elif char == '📉': result += '[GRAPH_DOWN]'
            elif char == '🔄': result += '[REFRESH]'
            elif char == '🔴': result += '[RED]'
            elif char == '🟢': result += '[GREEN]'
            elif char == '🟡': result += '[YELLOW]'
            else:
                # For any other non-ASCII character, use a generic replacement
                result += f'[U+{ord(char):04X}]'  # Unicode code point in hex

    return result


def format_vulnerabilities_as_markdown(vulnerabilities: List[Vulnerability]) -> str:
    """
    Format a list of vulnerabilities as Markdown.

    Args:
        vulnerabilities (List[Vulnerability]): List of vulnerabilities to format.

    Returns:
        str: Markdown-formatted string of vulnerabilities.
    """
    if not vulnerabilities:
        return "No vulnerabilities found."

    # Group vulnerabilities by severity
    severity_groups = {
        "HIGH": [],
        "MEDIUM": [],
        "LOW": []
    }

    for vuln in vulnerabilities:
        severity = vuln.severity.upper()
        if severity in severity_groups:
            severity_groups[severity].append(vuln)
        else:
            severity_groups["LOW"].append(vuln)  # Default to LOW if unknown

    # Build the markdown output
    output = "# Security Vulnerabilities Report\n\n"

    # Summary section
    output += "## Summary\n\n"
    output += f"- **High Severity**: {len(severity_groups['HIGH'])}\n"
    output += f"- **Medium Severity**: {len(severity_groups['MEDIUM'])}\n"
    output += f"- **Low Severity**: {len(severity_groups['LOW'])}\n"
    output += f"- **Total**: {len(vulnerabilities)}\n\n"

    # Detailed findings by severity
    for severity, vulns in severity_groups.items():
        if not vulns:
            continue

        output += f"## {severity} Severity Vulnerabilities\n\n"

        for i, vuln in enumerate(vulns, 1):
            output += f"### {i}. {vuln.id}: {vuln.description}\n\n"
            output += f"- **File**: `{vuln.file_path}`\n"
            output += f"- **Line**: {vuln.line_number}\n"
            output += f"- **Confidence**: {vuln.confidence}\n"
            if vuln.cwe:
                output += f"- **CWE**: {vuln.cwe}\n"
            output += "\n**Vulnerable Code:**\n\n```\n{}\n```\n\n".format(vuln.code)

            # Clean the code of emoji characters
            clean_code = _remove_emoji(vuln.code) if vuln.code else ""

            # Add a machine-readable format for the vulnerability
            output += f"Fix for {vuln.id} in {vuln.file_path}:{vuln.line_number}\n"
            output += "Original Code\n"
            # Add line numbers to the code
            for i, line in enumerate(clean_code.strip().split('\n'), start=vuln.line_number):
                output += f"{i} {line}\n"

            # Add fix suggestion if available
            if vuln.fix_suggestion:
                # Clean the fix suggestion of emoji characters
                clean_fix = _remove_emoji(vuln.fix_suggestion)

                # Add a more structured format for the fix that can be easily parsed
                output += "**Suggested Fix:**\n\n```\n{}\n```\n\n".format(clean_fix)

                output += "Suggested Fix\n"
                # Add the fix without the "**Suggested Fix:**" prefix
                clean_fix = clean_fix.replace("**Suggested Fix:**", "").strip()
                # Add line numbers to the fix
                for i, line in enumerate(clean_fix.strip().split('\n'), start=vuln.line_number):
                    output += f"{i} {line}\n"
            else:
                # If no fix suggestion is available, add a placeholder
                output += "Suggested Fix\n"
                output += "**No fix suggestion available**\n"

            output += "---\n\n"

    return output


def format_vulnerabilities_as_json(vulnerabilities: List[Vulnerability]) -> Dict[str, Any]:
    """
    Format a list of vulnerabilities as a JSON-serializable dictionary.

    Args:
        vulnerabilities (List[Vulnerability]): List of vulnerabilities to format.

    Returns:
        Dict[str, Any]: JSON-serializable dictionary of vulnerabilities.
    """
    result = {
        "summary": {
            "high": len([v for v in vulnerabilities if v.severity.upper() == "HIGH"]),
            "medium": len([v for v in vulnerabilities if v.severity.upper() == "MEDIUM"]),
            "low": len([v for v in vulnerabilities if v.severity.upper() == "LOW"]),
            "total": len(vulnerabilities)
        },
        "vulnerabilities": []
    }

    for vuln in vulnerabilities:
        # Clean the code and fix suggestion of emoji characters
        clean_code = _remove_emoji(vuln.code) if vuln.code else ""
        clean_fix = _remove_emoji(vuln.fix_suggestion) if vuln.fix_suggestion else "No fix suggestion available"
        clean_description = _remove_emoji(vuln.description) if vuln.description else ""

        result["vulnerabilities"].append({
            "id": vuln.id,
            "severity": vuln.severity,
            "confidence": vuln.confidence,
            "file_path": vuln.file_path,
            "line_number": vuln.line_number,
            "description": clean_description,
            "code": clean_code,
            "cwe": vuln.cwe,
            "fix_suggestion": clean_fix
        })

    return result
